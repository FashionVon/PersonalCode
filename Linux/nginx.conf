################每个指令末尾都必须有分号结束######################
#user  nobody nobody;   #运行用户组 用户
worker_processes  1;    #要起动的nginx进程数量 通常设置成和cpu的数量相等

#error_log  logs/error.log;     #全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

worker_rlimit_nofile 65535;     #用于指定一个NGINX进程可以打开的最多的文件描述符数量，需要使用ulimit -n 65535来设定。

#pid        logs/nginx.pid;     #进程文件位置 保存nginx的进程号

#工作模式与连接数上限
events {
    accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on
    multi_accept on;   #设置一个进程是否同时接受多个网络连接，默认为off
    use epoll;         #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport
    worker_connections  1024;   #单个进程最大连接数（最大连接数=连接数*进程数）
}

#设定http服务器，利用它的反向代理功能提供负载均衡支持
http {
    include       mime.types;               #文件扩展名与文件类型映射表
    default_type  application/octet-stream; #默认文件类型 默认为text/plain
    #charset utf-8;                         #默认编码

    # 日志格式设定
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 #on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，
    #降低系统的负载。注意：如果图片显示不正常把这个改成off。
    sendfile        on; #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块
    #tcp_nopush     on; #防止网络阻塞

    #keepalive_timeout  0;
    keepalive_timeout  65;      #长连接超时时间，单位是秒

    #gzip  on;   #开启gzip压缩输出
    #虚拟主机的配置
    server {
        listen       80;        #监听80端口
        server_name  localhost; #虚拟机域名
        root         /apps/oaapp;   #网站根目录地址
        #charset koi8-r;        #web服务器的语言编码。

        #access_log  logs/host.access.log  main;    #设定本虚拟主机的访问日志

        #匹配url地址中有"/",则执行花括号中的配置
        location / {
            root   /apps/oaapp;
            index  index.html index.htm;    #定义路径下默认访问的文件名，一般跟着root放
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    include          vhosts/*.conf; #分割配置文件，方便管理
}

-----------------------------------------------------------------------
location匹配      syntax: location [=|~|~*|^~|@] /uri/ { … }
=： 精确匹配
~： 正则表达式匹配，区分字符大小写
~*：正则表达式匹配，不区分字符大小写
^~：URI 的前半部分匹配，且不实用正则表达式
/ : 通用匹配, 如果没有其它匹配,任何请求都会匹配到.
优先级：
= > location 完整路径 > ^~ > ~ > ~* > location 起始路径 > location /


URL重写:  rewrite <REGEX> <REPL> <FLAG>
rewrite ^/images/(.*\.jpg)$ /imgs/$1 break;
- last：重写完成后，继续匹配其他 rewrite 规则
- break：重写完成后不再继续匹配
- redirect：返回 302 重定向（临时重定向），客户端对重定向的 URL 发起新的请求
- permanent：返回 301 重定向（永久重定向），客户端对重定向的 URL 发起新的请求

仅允许 192.168.0.0/24 网段客户端访问
allow 192.168.0.0/24;
deny all;
----------------------------------------------------------------------

整个配置文件分为：
全局块：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。

events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。

http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。

server块：配置虚拟主机的相关参数，一个http中可以有多个server。

location块：配置请求的路由，以及各种页面的处理情况。

-----------------------------------------------------------------------

Nginx负载均衡的4种算法：

热备：有N台服务器作为后备机器，当一台服务器发生事故时，才启用第二台服务器给提供服务。服务器处理请求的顺序：AAAAAA突然A挂啦，BBBBBBBBBBBBBB.....
    upstream mysvr { 
      server 127.0.0.1:7878; 
      server 192.168.10.121:3333 backup;  #热备     
    }

轮询：nginx默认就是轮询其权重都默认为1，服务器处理请求的顺序：ABABABABAB....
    upstream mysvr { 
      server 127.0.0.1:7878;
      server 192.168.10.121:3333;       
    }

加权轮询：跟据配置的权重的大小而分发给不同服务器不同数量的请求。如果不设置，则默认为1。下面服务器的请求顺序为：ABBABBABBABBABB....
    upstream mysvr { 
      server 127.0.0.1:7878 weight=1;
      server 192.168.10.121:3333 weight=2;
    }

ip_hash:nginx会让相同的客户端ip请求相同的服务器。
    upstream mysvr { 
      server 127.0.0.1:7878; 
      server 192.168.10.121:3333;
      ip_hash;
    }